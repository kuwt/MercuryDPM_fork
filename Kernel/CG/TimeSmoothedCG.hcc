//Copyright (c) 2013-2020, The MercuryDPM Developers Team. All rights reserved.
//For the list of developers, see <http://www.MercuryDPM.org/Team>.
//
//Redistribution and use in source and binary forms, with or without
//modification, are permitted provided that the following conditions are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name MercuryDPM nor the
//    names of its contributors may be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE MERCURYDPM DEVELOPERS TEAM BE LIABLE FOR ANY
//DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#include <iostream>
#include "Particles/BaseParticle.h"
#include "Interactions/BaseInteraction.h"
#include "Math/ExtendedMath.h"
#include "DPMBase.h"

template<class Coordinates, template<class> class BaseFunction, class Fields>
TimeSmoothedCG<Coordinates, BaseFunction, Fields>::TimeSmoothedCG()
        : CG<Coordinates, BaseFunction, Fields>()
{
    widthTime_ = 1.0;
    cutoffTime_ = 3.0;
    nextTime_ = 0.0;
    timeStep_ = 1.0;
    //averages empty vector
#ifdef DEBUG_CONSTRUCTOR
    std::cerr << "TimeSmoothedCG::TimeSmoothedCG() finished" << std::endl;
#endif
}

template<class Coordinates, template<class> class BaseFunction, class Fields>
void TimeSmoothedCG<Coordinates, BaseFunction, Fields>::write(std::ostream& os) const
{
    BaseCG::write(os);
    os << " widthTime " << widthTime_ << " cutoffTime " << cutoffTime_ << ' ';
    CG<Coordinates, BaseFunction, Fields>::function_.write(os);
    os << "\ntime ";
    Coordinates::writeNames(os);
    CG<Coordinates, BaseFunction, Fields>::Point::writeNames(os, Coordinates::countVariables() + 1);
    os << '\n';
}

template<class Coordinates, template<class> class BaseFunction, class Fields>
void
TimeSmoothedCG<Coordinates, BaseFunction, Fields>::writeAll(std::ostream& os,
                                                            TimeSmoothedFields<Fields>& average) const
{
    auto itPoint = CG<Coordinates, BaseFunction, Fields>::points_.begin();
    for (auto averageVariable : average.fields_)
    {
        os << average.time_ << ' ';
        itPoint->coordinates.write(os);
        averageVariable.write(os);
        os << '\n';
        itPoint++;
    }
}

template<class Coordinates, template<class> class BaseFunction, class Fields>
void TimeSmoothedCG<Coordinates, BaseFunction, Fields>::setWidthTime(Mdouble widthTime)
{
    widthTime_ = widthTime;
    cutoffTime_ = 3.0 * widthTime_;
}

template<class Coordinates, template<class> class BaseFunction, class Fields>
Mdouble TimeSmoothedCG<Coordinates, BaseFunction, Fields>::getWidthTime() const
{
    return widthTime_;
}

template<class Coordinates, template<class> class BaseFunction, class Fields>
void TimeSmoothedCG<Coordinates, BaseFunction, Fields>::setTimeStep(Mdouble timeStep)
{
    timeStep_ = timeStep;
}

template<class Coordinates, template<class> class BaseFunction, class Fields>
Mdouble TimeSmoothedCG<Coordinates, BaseFunction, Fields>::getTimeStep() const
{
    return widthTime_;
}

template<class Coordinates, template<class> class BaseFunction, class Fields>
TimeSmoothedCG<Coordinates, BaseFunction, Fields>* TimeSmoothedCG<Coordinates, BaseFunction, Fields>::copy() const
{
    return new TimeSmoothedCG(*this);
}

template<class Coordinates, template<class> class BaseFunction, class Fields>
std::string TimeSmoothedCG<Coordinates, BaseFunction, Fields>::getName() const
{
    return "TimeSmoothed" + CG<Coordinates, BaseFunction, Fields>::getName();
}

/*!
 * \details Initialises nextTime_ with the initial value of DPMBase::time_
 */
template<class Coordinates, template<class> class BaseFunction, class Fields>
void TimeSmoothedCG<Coordinates, BaseFunction, Fields>::initialise()
{
    CG<Coordinates, BaseFunction, Fields>::initialise();
    //nextTime_ = CG<Coordinates, BaseFunction, Fields>::getHandler()->getDPMBase()->getTime(); // + cutoffTime_;
    nextTime_ = this->timeMin_;
};

/*!
 * \details writes the not yet written values in averages_ into the stat file, 
 * and deletes the written values. Then closes the stat file.
 */
template<class Coordinates, template<class> class BaseFunction, class Fields>
void TimeSmoothedCG<Coordinates, BaseFunction, Fields>::evaluate()
{
    // set all variables to zero
    CG<Coordinates, BaseFunction, Fields>::resetVariables();
    
    // evaluate particles and fields, then volume-average (common part for CG, timeAveragedCG and timeSmoothedCG)
    CG<Coordinates, BaseFunction, Fields>::evaluateCommon();
    
    //divide by volume
    CG<Coordinates, BaseFunction, Fields>::volumeAverageVariables();
    
    const DPMBase* dpm = CG<Coordinates, BaseFunction, Fields>::getHandler()->getDPMBase();
    const Mdouble currentTime = dpm->getTime();
    
    if (std::isinf(nextTime_)) nextTime_ = currentTime;

    // Create new set of values if currentTime+cutoff>=nextTime
    if (currentTime + cutoffTime_ >= nextTime_)
    {
        //logger(INFO,"Creating new time-smoothed Field for t=% at t=%",nextTime_, currentTime);
        //std::cout << "Creating new averaged CG" << nextTime_ << std::endl;
        averages_.push_back(
                TimeSmoothedFields<Fields>(CG<Coordinates, BaseFunction, Fields>::points_.size(), nextTime_));
        nextTime_ += timeStep_;
        if (nextTime_ > CG<Coordinates, BaseFunction, Fields>::getTimeMax())
            nextTime_ = std::numeric_limits<Mdouble>::max();
    }
    
    // Average, write and delete completed sets of values
    for (auto& average : averages_)
    {
        if (average.time_ + cutoffTime_ < currentTime)
        {
            for (auto& averageVariable : average.fields_)
            {
                averageVariable /= average.sumWeights_;
            }
            //logger(INFO,"Writing completed time-smoothed Field for t=% at t=%",average.time_, currentTime);
            if (CG<Coordinates, BaseFunction, Fields>::statFile.openWrite(dpm->getNumberOfTimeSteps()))
            {
                writeAll(CG<Coordinates, BaseFunction, Fields>::statFile.getFstream(), average);
                CG<Coordinates, BaseFunction, Fields>::statFile.close();
            }
            average = averages_.back();
            averages_.pop_back();
        }
    }
    
    // Adding to existing set of values
    for (auto& average : averages_)
    {
        auto itPoint = CG<Coordinates, BaseFunction, Fields>::points_.begin();
        Mdouble weight = exp(-mathsFunc::square(currentTime - average.time_) / (2.0 * widthTime_ * widthTime_));
        average.sumWeights_ += weight;
        for (auto& averageVariable : average.fields_)
        {
            if (itPoint == CG<Coordinates, BaseFunction, Fields>::points_.end())
            {
                ///\todo Make proper error messages
                std::cerr << "Error" << std::endl;
                exit(-1);
            }
            else
            {
                averageVariable += (*itPoint) * weight;
            }
            itPoint++;
        }
    }
};

/*!
 * \details After all time steps have been computed, this function finishes the 
 * computation of the average by dividing the field values by nTime_.
 * 
 * Thus, at the end of finish, the fields contain the average over the field 
 * values of all time steps.
 */
template<class Coordinates, template<class> class BaseFunction, class Fields>
void TimeSmoothedCG<Coordinates, BaseFunction, Fields>::finish()
{
    //Writing and deleting averaged CG in timely order
    while (averages_.size() != 0)
    {
        // find the object with the smallest time value
        typename std::vector<TimeSmoothedFields<Fields> >::iterator
                next = averages_.begin();
        for (auto it = next + 1; it != averages_.end(); it++)
        {
            if (it->time_ < next->time_)
                next = it;
        }
        // recalculate the time-average (as we don't have a complete set)
        for (auto& averageVariable : next->fields_)
        {
            averageVariable /= next->sumWeights_;
        }
        if (CG<Coordinates, BaseFunction, Fields>::statFile.openWrite(
                this->getHandler()->getDPMBase()->getNumberOfTimeSteps()))
        {
            //write and delete
            writeAll(CG<Coordinates, BaseFunction, Fields>::statFile.getFstream(), *next);
        }
        *next = averages_.back();
        averages_.pop_back();
    }
    
    CG<Coordinates, BaseFunction, Fields>::statFile.close();
}
