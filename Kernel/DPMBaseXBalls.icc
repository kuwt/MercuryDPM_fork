//Copyright (c) 2013-2020, The MercuryDPM Developers Team. All rights reserved.
//For the list of developers, see <http://www.MercuryDPM.org/Team>.
//
//Redistribution and use in source and binary forms, with or without
//modification, are permitted provided that the following conditions are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name MercuryDPM nor the
//    names of its contributors may be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE MERCURYDPM DEVELOPERS TEAM BE LIABLE FOR ANY
//DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//icc means included cc file
#include "Math/Quaternion.h"

//to change xballs scripts to executables
#ifdef UNIX
#include <sys/types.h>
#include <sys/stat.h>
#endif

///This function outputs the location and velocity of the particle in a format the xballs progream can read
void DPMBase::outputXBallsDataParticle(unsigned int i, unsigned int format, std::ostream& os) const
{
    const auto p = particleHandler.getObject(i);
    //dataFile.precision(14);
    ///\todo{changes in *.icc files are not immediately regognized by the makefile!}
    //This outputs the data about particle i again to the file.
    switch (format)
    {
        case 8:
        {
            if (getSystemDimensions() == 1)
            {
                os << p->getPosition().X << " 0 "
                   << p->getVelocity().X << " 0 "
                   << p->getRadius() << " 0 0 0" << std::endl;
                break;
            }
            else
            {
                std::streamsize prec = os.precision();
                os << std::setprecision(std::numeric_limits<double>::digits10)
                   << p->getPosition().X << " "
                   << p->getPosition().Y << " "
                   << std::setprecision(prec)
                   << p->getVelocity().X << " "
                   << p->getVelocity().Y << " "
                   << p->getRadius() << " "
                   << p->getOrientation().getAngleZ()
                   << " " // negative b/c we are plotting (x,y) coordinates on the xz-axis of xballs
                   << -p->getAngularVelocity().Z << " "
                   << getInfo(*p) << '\n';
            }
            break;
        }
        case 14:
        {
            Quaternion angle = p->getOrientation();
            std::streamsize prec = os.precision();
            //plot position highly accurate, so the overlap is accurate
            os << std::setprecision(std::numeric_limits<double>::digits10)
               << p->getPosition() << " "
               << std::setprecision(prec)
               << p->getVelocity() << " "
               << p->getRadius() << " "
               ///\todo TW should we really write the expensive-to-compute Euler angles instead of the unit quaternion?
               << angle.getEuler() << " "
               << p->getAngularVelocity() << " "
               << getInfo(*p) << '\n';
            break;
        } //end case 3
        default:
        {
            std::cerr << "format not found" << std::endl;
            break;
        }
    } //end switch statement
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
///This automatically creates an xballs script to plot the data you have just generated///
/////////////////////////////////////////////////////////////////////////////////////////////////////

void DPMBase::writeXBallsScript() const
{
    std::stringstream file_name;
    std::ofstream script_file;
    file_name << getName() << ".xballs";
    script_file.open((file_name.str()).c_str());
    
    ///First put in all the script lines. All these lines do is move you to the correct directory from any location
    script_file << "#!/bin/bash" << std::endl;
    script_file << "x=$(echo $0 | cut -c2-)" << std::endl;
    script_file << "file=$PWD$x" << std::endl;
    script_file << "dirname=`dirname \"$file\"`" << std::endl;
    script_file << "cd $dirname" << std::endl;
    
    Mdouble scale;
    //Mdouble offset = 0;
    int verticalOffset = 0;
    int horizontalOffset = static_cast<int> (500.0 * (0.0 - getXMin()) / (getXMax() - getXMin()));
    int format;
    
    if (getSystemDimensions() < 3)
    { // dim = 1 or 2
        format = 8;
        verticalOffset = static_cast<int> (500. * (0.0 - getYMin()) / (getYMax() - getYMin()));
        if (getXBallsScale() < 0)
        {
            scale = 1.0 / std::max(getYMax() - getYMin(), getXMax() - getXMin());
        }
        else
        {
            scale = getXBallsScale();
        }
    }
    else
    { //dim==3
        format = 14;
        verticalOffset = static_cast<int> (500. * (0.0 - getZMin()) / (getZMax() - getZMin()));
        if (getXBallsScale() < 0)
        {
            scale = 1.2 / std::max(getZMax() - getZMin(), getXMax() - getXMin());
        }
        else
        {
            scale = getXBallsScale();
        }
        
    }
    
    script_file << getMercuryBuildDir() << "/XBalls/xballs -format " << format
                << " -f " << dataFile.getFullName().substr(dataFile.getFullName().find_last_of("/") + 1)
                << " -s " << scale
                << " -cmode " << getXBallsColourMode()
                << " -cmax -sort ";
    if (verticalOffset >= 1)
        script_file << " -o " << verticalOffset;
    else if (verticalOffset >= 1)
        script_file << " -mo " << -verticalOffset;
    if (horizontalOffset >= 1)
        script_file << " -moh " << horizontalOffset;
    else if (horizontalOffset >= 1)
        script_file << " -oh " << -horizontalOffset;
    script_file << " " << getXBallsAdditionalArguments() << " $*";
    ///\todo{thomas:why does vscale have to be integer?}
    if (getXBallsVectorScale() > -1)
    {
        script_file << " -vscale " << getXBallsVectorScale();
    }
    script_file.close();
    
    //This line changes teh file permision and give the owener (i.e. you) read, write and excute permission to the file.
#ifdef UNIX
    chmod((file_name.str().c_str()), S_IRWXU);
#endif

}

