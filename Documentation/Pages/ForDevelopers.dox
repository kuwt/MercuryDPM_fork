/**
\page ForDevelopers For Developers

The sections below contain advice for developers of MercuryDPM Kernel features.

- \subpage BranchesFD
- \subpage MergingFD
- \subpage ParallelFD


\page BranchesFD Working in a Branch
Read this section if you want to develop a new MercuryDPM Kernel feature.

- Before you can develop a new MercuryDPM Kernel feature, you need access to the development version of the code. Please contact one of the MercuryDPM <a href="http://mercurydpm.org/about-the-code/team">'managers'</a> to get access.
- You now should have read access to the Trunk/ and read-write access to the Branches/ directory of the repository. You can check that that you have access using svn list:
\code svn list https://svn.mercurydpm.org/SourceCode/Trunk \endcode
- All new Kernel features should be developed in a branch, i.e. in a subdirectory of Branches/. For example, say you want to develop a new wall type called StarShapedWall. The first step is to create your own branch using the following command:
\code svn copy https://svn.mercurydpm.org/SourceCode/Trunk https://svn.mercurydpm.org/SourceCode/Branches/StarShapedWall -m '' \endcode
- Checkout your new branch.
\code svn checkout https://svn.mercurydpm.org/SourceCode/Branches/StarShapedWall\endcode
- Now start working in your branch. This branch is only for you, so you can commit as often as you like, even if your code does not compile. I fact, we urge you to commit regularly.

Once your feature is developed fully, you are ready to merge the feature back to the Trunk:
- Make sure all your changes are committed to your Branch. Executing "svn status" in the source directory should not return any output.
- Make sure all your code compile correctly. Executing "make fullTest" in the build directory should return "100% tests passed".
- Make your Branch up-to-date with the Trunk. See \ref MergingFD.
- The final step is to merge your Branch back into the Trunk, and remove the Branch. Updating the Trunk is a sensitive issue, so only the 'managers' are allowed to do it. So please ask one of the managers (see http://mercurydpm.org/about-the-code/team) to merge your changes.
- Now you have developed your (first?) Kernel feature, and earned the right to appear on the <a href="http://mercurydpm.org/about-the-code/team">MercuryDPM team</a> website. Congratulations!




\page MergingFD Merging Trunk updates to your Branch

Read this sections if you want to merge changes made to the Trunk into your branch.

Your Branch does not automatically update when changes are made to the Trunk.
To get changes made to the Trunk into your branch, follow the following steps:

-# Make sure all your changes are committed to your Branch. Executing "svn status" in the source directory should not return any output.
-# You can update your branch using the command "svn merge ^/Trunk" in your source directory
-# Merging doesn't always go smoothly. You might get conflicts when you edited a file that we edited as well. 'svn merge' will ask you to accept the changes, or postpone the decision. When in doubt, postpone and fix the issue later.
-# Make sure all your code compile correctly. Executing "make fullTest" in the build directory should return "100% tests passed".
-# If some codes don't compile, you have to look into your code and find the issues (That's teh difficult part. Ask one of the other <a href="http://mercurydpm.org/about-the-code/team">developers</a> for help if necessary.)
-# If you cannot resolve the issues, you can undo the merge using 'svn revert . -R' in your source directory.
-# If you could resolve all issues (i.e. "make fullTest" returns "100% tests passed"), then commit your changes:
\code svn commit -m "Merged Trunk changes into my local branch" \endcode

\page ParallelFD Running simulations in parallel

MercuryDPM can run simulations in parallel using MPI. The algorithm uses a simple domain decomposition, splitting the domain into \f$n_x \times n_y \times n_z\f$ subdomains and running each subdomain on a separate processor.

To run simulations in parallel, you need to define all particles in setupInitialConditions and you need to define the domain size in main(). Generally, you should structure your driver code as follows:

\code
#include "Mercury3D.h"

class Demo : public Mercury3D {
  void setupInitialConditions() override {
    //define walls, boundary conditions, particle positions here
  }
};

int main() {
  Demo problem;
  //define contact law, time step, final time, domain size here
  problem.solve();
}
\endcode


To run your simulation in parallel, you need to compile the code with MPI. Use cmake and turn the flag Mercury_USE_MPI to ON. You can do this either by loading cmake-gui and changing the use USE_MPI flag to ON; or, alternatively you do it on the command line:

\code
cd MercuryBuild
cmake . -DMercury_USE_MPI=ON
\endcode

You also need to tell your program about the decomposition it should use. To split your domain  setNumberOfDomains into \f$n_x \times n_y \times n_z\f$, add the following command in your main function, before solve():

\code
//Set the number of domains for parallel decomposition
problem.setNumberOfDomains(Vec3D(nx,ny,nz));
\endcode

Now compile your code, and run it with mpirun. Make sure you use the correct number of processors (\f$n=n_x \cdot n_y \cdot n_z\f$) needed for the domain decomposition:

\code
//Set the number of domains for parallel decomposition
mpirun -np n MyDriverCode
\endcode

For an example of an MPI-ready code, see Drivers/ParallelDrum/testDrum.cpp.


*/