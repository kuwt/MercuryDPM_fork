/*! \page Mercury_CG Coarse graining: From discrete particles to continuum fields

\section What What is MercuryCG?

MercuryDPM contains a unique toolbox for analysing particle data: the MercuryCG toolbox.
<img src="MercuryCG.png" width="400">

Particle simulations create huge amounts of data (particle trajectories and interactions), but most of it is irrelevant to understand the behaviour of a particular process. What really matters to the process engineer is the macroscopic behaviour of the bulk material, which is typically described by continuum fields, such as density, velocity, stress, or temperature.

MercuryCG extracts these continuum fields from the particle data (positions, velocities, forces) via a method called coarse-graining, which is explained in [Goldhirsch, Granular Matter, 2010] and [Weinhart et al, Granular Matter, 2012].

The following pages are intended for MercuryDPM users that want to use MercuryCG to extract continuum data from their particle simulations. This can be done either concurrently (during the simulation) or as a post-processing step (after the simulation, based on the output data).

\section Documentation

Each type of use has been documented on a separate page:.
 - \subpage CG
 - \subpage MercuryCG
 - \subpage fstatistics
 - \subpage CGHandler
 - \subpage ExperimentalCG

The first page describes the mathematical formulae used to extract continuum fields from particle data.
The second/third page tells you how to apply the analysis tool as a post-processing tool.
The third page tells you how to apply concurrently, while running a MercuryDPM simulation.

While the tool has been developed to analyse MercuryDPM simulations, it can also be used to extract information from other particle simulation software, and even experimental data, as long as the data provided in the MercuryDPM output format.

\section Examples

Here are two examples of the coarse-graining method applied:
 -# Silo flow [Weinhart et al, Powder Technology 293, 138-148 (2016)]:
   <img src="CGSilo.png" width="400">
   The figure on the left shows a 3D particle simulation of granular flow through a thin, rectangular silo. One can observe three regions, a static zone near the side walls, a shear band, and core flow. To properly define those regions, we use coarse graining to define the velocity \f$\vec{v}(x,z)\f$, averaged over depth y and time t, then plot the normalized pure shear, \f$s=\frac{\partial_xv_z(x,z)}{\max_z\partial_xv_z(x,z)}\f$, shown in the right figure. One can clearly see that the pure shear is large in the shear band. By fitting the pure shear values with a Gaussian, the shear band centre and width can be clearly defined.

 -# Segregating flow [Weinhart et al, AIP Conf. Proc. 1542, 1202-1205 (2013)]
   <img src="CGSegregation.png" width="400">
   The centre image shows the flow of a mixture of particles of two different sizes down an inclined, rough surface. The simulation is periodic in x- and y-direction and evolved until the flow is steady, uniform. One can clearly see that the mixture segregates, with large particles on the top and small particles on the bottom. To find out what causes the segregation, we compute the continuum fields of the small and large particles separately and look for differences between the two mixture components. We observe that the contribution of the small particles to the granular temperature (or kinetic stress) is overproportionally large (i.e. larger than their volume fraction), shown in the top right of the figure. This suggests that segregation is driven by the kinetic stress differences between the components (and not the total stress differences, as was suggested in previous work). Note that coarse-graining clearly defines how much each mixture component contributes to the total stress, and it was only due to that clear definition of partial stresses in the coarse-graining formulation that this effect could be observed.

 -# Atomistic fluids [Hartkamp et al, J. Chem. Phys. 137, 044711 (2012)]
   <img src="CGAtoms.png" width="400">
   Coarse-graining is also applicable to molecular dynamics simulations, in this case atomistic flow through a nanochannel. Near the channel wall, we observed oscillations in the flow density, which indicates that the flow is slightly ordered. To resolve this phenomenon, a high spatial resolution is required, which can easily be obtained in coarse-graining by using a small length scale \f$w\f$.
*/

/*! \page CG Coarse graining: the definition of continuum fields
\tableofcontents

This page describes the mathematical formulas used to extract continuum fields from particle data.

Discrete particle simulations create a large amount of data, such as the position
and velocities of each interactable (particle/wall), and the forces created by
each interaction. This data completely describes the system you are simulating,
but it is difficult to draw any physically relevant conclusions from it.

Therefore, granular assemblies are often described using continuum fields, like
density \f$\rho\f$, momentum \f$\vec j=\rho \vec V\f$, stress
\f$\mathbf \sigma\f$ and temperature.
Continuum descriptions have been very sucessful in describing the macroscopic
physical behavior of granular systems, and describe many phenomena as diverse as
plastic/inertial flow, soil mechanics, or segregation.
Other phenomena such as fracturing, jamming/force chains, crystallization have
so far resisted efforts to be described by continuum theories. However, we can
still learn a lot from evaluation their continuum properties by developing
special continuum fields such as fabric, displacement, or orientation.

\section cons Defining the basic coarse-grained fields

Density, momentum, and stress, in particular, are strongly related to each
other, as they observe the equations describing conservation of mass and
momentum,
\f[\partial_t\rho + \nabla\cdot(\rho \vec V) = 0,\f]
\f[\partial_t(\rho \vec V) + \nabla\cdot(\rho \vec V \vec V) =
   \nabla \mathbf \sigma + \rho \vec g.\f]

While traditional micro-macro methods begin by defining density, momentum, and
stress and then show that they satisfy ass and momentum balance in a statistical
sense (ie. by ensemble averaging), coarse-graining takes a different approach:

\subsection dens Density

In coarse-graining, density is defined first, as the sum over all particle
masses weighted by the distance to the evaluated position:
\f[\rho(\vec r)=\sum_i m_i \phi(\vec r,\vec r_i),\f]
with position \f$r\f$, particle position \f$r_i\f$.
The coarse-graining function \f$\phi\f$ (aslo called weighting or kernel
function) is not uniquely defined, but often a Gauss function of width \f$w\f$
is used,
\f[ \phi(\vec r,\vec r_i) = c \exp(-\frac{|\vec r-\vec r_i|^2}{2w^2}),\f]
where the prefactor \f$c\f$ is chosen such that \f$\int \phi(\vec r) d\vec r = 1\f$.

\subsection mom Momentum

Next, the momentum at a given position is defined as the sum over all particle
moments weighted by the distance to the position:
\f[\vec j(\vec r)=\sum_i m_i \phi(\vec r,\vec r_i),\f]
Thus, the velocity is defined as
\f[\vec V(\vec r) = \frac{\vec j(\vec r,t)}{\rho(\vec r)}.\f]

One can easily show that the density and momentum density fields satisfy the
mass conservation equation *by definition*.

\subsection stress Kinetic and contact stress

Similarly, the stress tensor can be defined such that it identically satisfies
the conservation of momentum. For that, we define the stress as the
sum of the *contact stress* and the *kinetic stress*,
\f[ \mathbf \sigma=\mathbf \sigma^{c}+\mathbf \sigma^{c}. \f]

The kinetic stress can be calculated from momentum
flux and density as
\f[\mathbf \sigma^{k} = \mathbf k - \rho \vec V \otimes  \vec V,\f]
where the momentum density is defined as the sum over all particles i
\f[\mathbf k(\vec r,t)=\sum_i m_i \vec v_i \otimes \vec v_i\phi(\vec r,\vec r_i),\f]
with particle momentum flux  \f$m_i\vec v_i \otimes \vec v_i\f$ and kernel function
\f$\phi(\vec r,\vec r_i)\f$.

The contact stress is has a slightly more complex definition:
\f[\mathbf \sigma^{c}(\vec r,t)=\sum_{ij} \vec f_{ij} \otimes \vec l_{ij} \psi(\vec r,\vec r_i,\vec r_j),\f]
with contact force \f$\vec f_{ij}\f$,
branch vector \f$\vec l_{ij}= \vec c_{ij}-\vec r_i\f$,
particle position \f$\vec r_i\f$, contact point \f$\vec c_{ij}\f$,
and a line integral over the kernel function,
\f[ \psi(\vec r,\vec r_i,\vec r_j) = \int_{0}^{1} \phi(\vec r - \vec r_I + s r_{IP}) ds.\f]

One can show that this stress definition satisfies the momentum conservation
equation *by definition*.

*/

/*! \page MercuryCG MercuryCG: Post-processing discrete particle data using the coarse-graining formulation (in development)
 \tableofcontents

This feature is _still in development_, so the documentation is meant for
developers only. However, anyone is welcome to give it a try.

MercuryCG is a new implementation of the \ref coarsegraining "coarse graining" toolbox \ref fstatistics "fstatistics", and will replace this toolbox in the near future.

MercuryCG is a postprocessing tool: it takes an existing data set, consisting of a restart and one or more data and fstat files, and applies the coarse-graining formulation to it. The output is stored in a stat file, which can then be read by gnuplot or Matlab (via the readMercuryCG.m file in Drivers/MercuryCG/) to be visualised.

This document details how to use MercuryCG as a post-processing tool. Note, coarse graining can also be applied during a MercuryDPM simulation, analysing the data while the simulation is still running; to do this, see the \ref CGHandler "CGHandler" documentation.

\section basics Basic syntax

First, we provide the basic syntax, then show some examples. Finally, more complex operations are introduced.

Assume you want to analyse the output files of the Driver's code NewtonsCradleSelfTest, located in the folder Drivers/MercuryCG. To create the file, run the simulation using `make SquarePackingSelfTest && ./SquarePackingSelfTest` in said folder). The simulation produces two output files that MercuryCG needs: SquarePackingSelfTest.data and SquarePackingSelfTest.fstat. To analyse this data,
- change to the folder `Drivers/MercuryCG/` in the build directory,
- compile MercuryCG
\code make MercuryCG \endcode
- run the following command
\code./MercuryCG SquarePackingSelfTest \endcode

Note: If the data is in another folder than `Drivers/MercuryCG/`, you have to prepend the file path to the file name. For example, to analyse the output files of `LeesEdwardsSelfTest` in the folder `MercurySimple demos`, use the command
\code./MercuryCG ../MercurySimpleDemos/LeesEdwardsSelfTest\endcode

With the above arguments, MercuryCG outputs spatially-averaged continuum fields for each time step in the data/fstat files into a file named 'SquarePackingSelfTest.stat`. For a quick check of the output, the spatially-averaged results from the last written timestep are outputted to the screen
\code Spatial averages: VolumeFraction 0.785398 Density 1 Momentum 0 -5.6968e-07 0 ...
 \endcode

Note that MercuryCG returns the momentum instead of the velocity, as momentum has a primary definition as a coarse-grained variable (\f$\vec{j}=\sum_i m_i\vec{v}_i\phi_i\f$), while velocity is computed by dividing two "primary" coarse-grained fields (momentum and density, \f$\vec{V}=\vec{j}/\rho\f$). Generally, MercuryCG only outputs `primary` coarse-grained variables, as they are well-defined even if no particles are present. The primary fields are also the most relevant for any macroscopic theory based on conservation principles, as they have well-defined averaging properties (they can be thought of as the density of a microscopic quantity). Secondary fields like velocity can be constructed by combining the primary fields. The script readMercuryCG.m reads the primary variables into Matlab and constructs several secondary variables (velocity, kinetic stress, temperature, etc).

\subsection output  Output format

The output file consists of a two-line header followed by several lines of data. For the example above, the output is:

\code
CG<O> n 1 1 1 min 0 0 -0.5 max 5 5 0.5 width 1 Lucy cutoff 1
time 2:VolumeFraction 3:Density 4-6:Momentum ...
0 0.785398 1 0 0 ...
0.4 0.785398 1 0 6.72166e-05 ...
0.6 0.785398 1 0 -1.53499e-05 ...
0.8 0.785398 1 0 3.09892e-06 ...
1 0.785398 1 0 -5.83261e-07 ...
\endcode

The first line outputs a few properties you need to interpret the remaining file output:
- `%CG`: the standard #CG class was used, which evaluates each time step separately (see also #TimeAveragedCG and #TimeSmoothedCG)
- '<O>': the coordinate type #O was used, which returns spatial averages (see also #X, #XY, #XYZ, etc)
The first line details the different fields that are computed by fstatistics, e.g. volume fraction `Nu`, bulk density `Density` and the three momentum components `MomentumX MomentumY MomentumZ`.
- `min 0 0 -0.5 max 5 5 0.5`: the spatial domain
- `n 1 1 1`: a 1x1x1 mesh of values was used, which is the only option for spatially averaged statistics.
- `width 1`: the coarse-graining width
- `Lucy`: the type of coarse-graining function (see #Gaussian, #Lucy, #Linear and #Heaviside)
- `cutoff 1`: the coarse-graining width

The second line specifies the time/space coordinates and fields computed by MercuryCG and the respective columns.

The remaining lines contains the coordinates and the values of the continuum fields at these coordinates.

\section advanced  Advanced options

MercuryCG can do much more than return global averages of the continuum fields. In particular, it can extract _local_ continuum fields at specific spatial coordinates. The behavior of MercuryCG is controlled via command line arguments; the most commonly used options are discussed in more detail below.

\subsection temp  Temporal averaging

The output file can be modified by adding additional arguments to the command line. E.g. you can use the `-timeaverage` command:
\code  ./MercuryCG SquarePacking -timeaverage \endcode
This tells MercuryCG to time-average. The output file now looks like this:

\code TimeAveragedCG<O> min 0 0 -0.5 max 5 5 0.5 n 1 1 1 width 1 Lucy cutoff 1
time 2:VolumeFraction 3:Density 4-6:Momentum ...
1 0.785398 1 0 -2.3681e-05 ...\endcode

\subsection space Spatially-resolved fields
The coarse-graining formulations can extract _local_ continuum fields, whose value depends on the spatial coordinate.
You can extract spatially resolved fields using the arguments `-coordinates XYZ -n 2 -timeaverage`. This creates a 2x2x2 grid of values over the domain and evaluates the continuum fields at each of those points.
Note, the grid is not part of the cg formulation itself: CG returns field values at all points in space; but numerically we can only evaluate the continuum fields at a final number of points.
The output file now contains 8 lines of data, one for each z-value:

\code
TimeAveragedCG<XYZ> min 0 0 -0.5 max 5 5 0.5 n 2 2 2 width 1 Lucy cutoff 1
time x y z 5:VolumeFraction 6:Density 7-9:Momentum ...
1 1.25 1.25 -0.25 0.744721 0.948208 0 -1.71359e-05 ...
1 1.25 1.25 0.25 0.744721 0.948208 0 -1.71359e-05 ...
1 1.25 3.75 -0.25 0.744362 0.947751 0 -2.94495e-05 ...
1 1.25 3.75 0.25 0.744362 0.947751 0 -2.94495e-05 ...
1 3.75 1.25 -0.25 0.744721 0.948208 0 -1.71359e-05 ...
1 3.75 1.25 0.25 0.744721 0.948208 0 -1.71359e-05 ...
1 3.75 3.75 -0.25 0.744362 0.947751 0 -2.94495e-0 ...
1 3.75 3.75 0.25 0.744362 0.947751 0 -2.94495e-05 ...
...\endcode

You can also choose to spatially resolve only specific spatial coordinates and average over the remaining ones. Use the arguments '-coordinates [O,X,Y,Z,XY,XZ,YZ,XYZ]' to modify this behaviour.

By default, the code uses the coarse-graining width 1, and a Lucy coarse-graining function.
Use the arguments `-function [Gaussian,Lucy,Linear,Heaviside]` and `-w [double]` to change these defaults. For an explanation of what a kernel function is, please see the \ref CG "section on the maths of coarse-graining".

\section vis Visualisation

The following command produces z-resolved data using a Lucy kernel with a narrow cutoff radius of 0.5 (one particle radius).
\code  ./MercuryCG SquarePacking -coordinates Z -n 100 -function Lucy -w 0.5 \endcode

We can now visualise this data using e.g. gnuplot:
\code
gnuplot> p 'SquarePackingSelfTest.stat' u 2:4 w l
gnuplot> p 'SquarePackingSelfTest.stat' u 2:4 w l
gnuplot> p 'SquarePackingSelfTest.stat' u 2:4 w l
 \endcode
The result is a density field with peaks at the particle centre and vanishing at a distance of 0.5 from the particle centre:
<img src="CG0.png" width="400">
Alternatively, you can visualise the data in Matlab:
\code
$ data = readMercuryCG('SquarePackingSelfTest.stat')
$ plot(data.z,data.Density)
\endcode

\subsection clm  Command line manual

You can obtain a full list of command line options by typing the `-help` command:
\code  ./MercuryCG -help

 DESCRIPTION

     MercuryCG is the postprocessing tool for extracting coarse-grained fields from particle data.

 SYNTAX

     You need to specify the base name of the MercuryDPM output files (data/fstat or restart files) that should be analysed.
     Additional arguments can be specified as [-option value] pairs:

         ./MercuryCG name [-option value]


 EXAMPLES OF USE

     1) To extract spatially-averaged continuum fields (i.e. the fields are functions of t only) from
         the output files name.*, use the following command:

         ./MercuryCG name -coordinates O

     2) To extract fully-resolved continuum fields (i.e. the fields are functions of x, y, z and t) from the output files name.* on a 10x10x10 spatial grid, use the following command

         ./MercuryCG name -coordinates XYZ -n 10

 OPTIONS

     -help
         Outputs a usage message and exits

     -coordinate value, -stattype value
         Determines which spatial dimensions should be resolved.
         Possible values are O, X, Y, Z, XY, XZ, YZ, XYZ, default is O.

     -function value, -cgtype value
         Determines the cg function.
         Possible values are Gauss, Heaviside, Linear, Lucy, default is Lucy.

     -fields value
         Determines which fields should be extracted.
         Possible values are StandardFields, LiquidMigrationFields, GradVelocityFields, default is StandardFields.

     -timeaverage
         If this option is specified, the data will be time-averaged.

     -timesmooth
         If this option is specified, the data will be coarse-grained in time.

     -n value
         Creates a spatial grid of n elements in each resolved dimension.
         Equivalent to '-nx value -ny value -nz value'.

     -nx value, -ny value, -nz value
         Specifies the amount of elements in each spatial direction.
         Will be ignored if the spatial direction is not resolved.
         Coarse-grained fields will be evaluated at the midpoints of each element.
         By default, the domain  is equal to the spatial domain of the DPM, as specified in the restart file (or data file if no restart file is given). However, the domain of the grid can be specified by the -x, -y, -z options.
         For example, for '-x 0 10 -nx 5', the cg fields will be evaluated at x=1,3,5,7,9.

     -h value
         Allows you to specify the element size in stead of the number of elements of the spatial grid.
         Equivalent to '-hx value -hy value -hz value'.

     -hx value, -hz value, -hz value
         Allows you to specify the element size in stead of the number of elements of the spatial grid.
         Equivalent to -nx ceil((maxX-minX)/value), where [minX,maxX] is the domain of the spatial grid.

     -n value
         Creates a spatial grid of n elements in each resolved dimension.
         Equivalent to '-nx value -ny value -nz value'.

     -x value1 value2, -y value1 value2, -z value1 value2
         Specifies the domain of the spatial grid on which the coarse-grained fields will be evaluated.
         For example, for '-x 0 10 -nx 5', the cg fields will be evaluated at x=1,3,5,7,9.

     -t value1 value2, -tmin value, -tmax value
         Specifies the minimum and maximum time values on which the cg fields will be evaluated.

     -o value
         Specifies the name of the output file in which the cg fields are written.
         By default, the output file will be named 'name.stat'.
\endcode


\subpage CGImages


*/

/*! \page  CGHandler CGHandler: Live coarse-graining during a discrete particle simulation

The old fstatistics tool was based on the templated StatisticsVector class. It added functionality to DPMBase that allowed the
evaluation of continuum fields, either during a simulation or as a post-processing step.
For example, to add global statistical output to your simulation, you had to derive your Driver class from both Mercury3D and StatisticsVector<O>:
\code{.cpp}
class DriverClass : public Mercury3D, public StatisticsVector<O> {
    // .. class definition
}
\endcode

This setup was inflexible, however, as it allowed only the evaluation of one type of coarse-graining.
This was replaced in MercuryCG by the #cgHandler, which can contain several CG objects if desired:
\code{.cpp}
class DriverClass : public Mercury3D {
    // .. class definition
}

int main () {
    DriverClass dpm; //declare your DPM class
    CG<CGCoordinates::O> cg; //declare a cg object
    cg.statFile.setSaveCount(50); //set parameters such as the output frequency
    dpm.cgHandler.copyAndAddObject(cg); // add the CG object to the cgHandler
    dpm.solve(); //run your DPM simulation
}
\endcode

\section Output Output to stat-files

If a cg object is added to the cgHandler, it will produce analytical data while the simulation is running.
This data is stored in a file named <TT>$name.$n.stat</TT>, where <TT>$name</TT> is the problem name specified by #setName,
and <TT>$n</TT> is the index of the cg object in the cgHandler. A basic example is shown in TutorialCG0.cpp.
It produces spatially averaged statistics at every 50-th time step, resulting in the following output:
\code{.cpp}
::::::::::::::
TutorialCG0.0.stat
::::::::::::::
CG n 1 1 1 width 1 timeMin 0.1601 min 0 0 0 max 9.92738 9.92738 9.92738 Lucy cutoff 1
time 2:volumeFraction 3:density 4-6:momentum 7-12:momentumFlux 13-21:contactStress 22-24:interactionForceDensity
0.1601 0.535174 1.02211 3.11529e-17 6.62723e-17 -1.38841e-17 0.000348305 9.52371e-06 -6.18274e-06 0.000314944 -1.0499
8e-05 0.000332432 583.523 -93.4013 -191.383 -56.5639 1100.79 -52.4474 -192.268 -48.4432 853.035 0 0 0
0.1651 0.535174 1.02211 1.19044e-17 4.79952e-16 1.43027e-15 75.5124 -29.6753 -15.9208 212.387 10.134 93.6674 1019.24
-2.79241 5.15266 1.58597 1525.6 9.29084 12.7538 -0.135959 956.726 0 0 0
...
\endcode

The first header line gives the user information about the type of coarse-graining applied;
in this case, the coordinate type is O, which denotes globally-averaged statistics.
<br/>
The second header line denotes the column numbers of the coordinates (time)
and the fields (volume fraction, etc) evaluated at the coordinates.
<br/>
All other lines contain coordinate and field values; e.g. the third line tells you that the volume fraction at time 0 was 0.6.
<br/>
The simple file format allow easy plotting of the data in gnuplot, e.g.
\code{.cpp}
>> gnuplot
> set xlabel 'volume fraction'
> set ylabel 'confining pressure'
> p 'TutorialCG0.0.stat' u 2:13
\endcode
<img src="TutorialCG0A.png" width="400">

One can also plot the same data in Matlab using loadStatistics.m provided in the Matlab folder
\code{.m}
>> cd ~/MercuryDPM/MercuryBuild/Drivers/Tutorials/
>> addpath("~/MercuryDPM/MercurySource/Matlab")
>> data = loadStatistics("TutorialCG0.0.stat");
>> plot(data.VolumeFraction,data.ContactStressXX);
>> xlabel('volume fraction'), ylabel('confining pressure');
\endcode
<img src="TutorialCG0B.png" width="400">

\section CGCoordinates CGCoordinates

The example above produced globally averaged statistics. However, usually coarse-graining is used to extract spatially dependent continuum fields.
This can be done by changing the CGCoordinate type:
\code{.cpp}
int main () {
  DriverClass dpm;
  dpm.setName("Test")
  CG<CGCoordinates::O> cgO;
  dpm.cgHandler.copyAndAddObject(cgO); // produces globally averaged statistics
  CG<CGCoordinates::XYZ> cgXYZ;
  cgXYZ.setWidth(1); //set cg width
  cgXYZ.setN(20); //set number of mesh points in each spatial direction
  dpm.cgHandler.copyAndAddObject(cgXYZ); // produces spatially resolved statistics
  dpm.solve();
}
\endcode

The code above produces two sets of output: <TT>Test.0.stat</TT> contains globally averaged data,
<TT>Test.1.stat</TT> contains spatially resolved data.
In the latter case, the number of evaluation points and the coarse-graining width has to be specified --
in this case, a Gaussian of width (standard deviation) 1 and a 20x20x20 mesh of evaluation points will be used.
</br>
Note that the latter statistics will produce huge amounts of data (8000 times more than the globally averaged statistics),
even though we have not chosen a particularly high resolution.
The data will further be highly fluctuating, as the continuum fields only depend on the small amount of data in the sphere around the evaluation point.
</br>
Thus, it is advisable to average in space when ever possible, i.e. if the data is homogeneous in space.
Often the data is not homogeneous in all spatial directions, but in some. In that case, spatial averaging can be applied in specific directions only.
This is done by using partially resolved CGCoordinates: X, Y, Z, XY, XZ, or YZ.
For example, <TT>CG<CGCoordinates::Z></TT> averages over the yz-plane, but resolves the fields in z-direction.
This is shown exemplary in <TT>TutorialCG1.1.stat</TT>:
\code{.cpp}
    ::::::::::::::
    TutorialCG1.1.stat
    ::::::::::::::
    ...
\endcode
A simple matlab plot reveals that the confining stress increases in the z-direction.
\code{.m}
    >> cd ~/MercuryDPM/MercuryBuild/Drivers/Tutorials/
    >> addpath("~/MercuryDPM/MercurySource/Matlab")
    >> data = loadStatistics("TutorialCG1.1.stat");
    >> plot(data.z,data.ContactStressZZ);
    >> xlabel('z'), ylabel('confining pressure');
    \endcode
<img src="TutorialCG1.png" width="400">

- Coarse-graining function:
The default cg function is a cutoff Gaussian, but it can be changed to other functions, such as polynomial radial basis functions (a Heaviside, Linear, or a Lucy polynomial). ...


\section temporal Temporal averaging

<!-- - TimeAveragedCG and TimeSmoothedCG: -->

Coarse-graining can also be applied in the time dimension. This can be done in MercuryCG by using a TimeAveragedCG or TimeSmoothedCG object:
\code{.cpp}
int main () {
    DriverClass dpm;
    dpm.setName("Test")
    CG<CGCoordinates::O> cg;
    dpm.cgHandler.copyAndAddObject(cgO); // produces time-resolved statistics
    TimeSmoothedCG<CGCoordinates::O> cgTS;
    dpm.cgHandler.copyAndAddObject(cgTS); // produces time-smoothed statistics
    TimeAveragedCG<CGCoordinates::O> cgTA;
    dpm.cgHandler.copyAndAddObject(cgTA); // produces fully time-averaged statistics
    dpm.solve();
}
\endcode
This can best be studied by looking at a time-dependent problem, such as a slowly sheared Lees-Edwards-style simulation:
The friction in this system initially builds up until it reaches a maximum, then decreases towards a smaller, critical value.


If your DPM problem is steady, it is not necessary to resolve the continuum
fields in time. This can be done in Mercury by using time-averaging cg, e.g.
> TimeAveragedCG<CGFunctions::GaussZ> cg; \n
> cg.setNZ(10); \n
> cg.setWidth(0.15); \n
> cg.statFile.setSaveCount(20000); \n
> problem.cgHandler.copyAndAddObject(cg);
To limit the time interval over which the continuum fields are evaluated to
e.g. \f$[10,20]\f$, use
> cg.setTimeMin(10); \n
> cg.setTimeMax(20);

\section postprocess Post-processing

Processing restart files

\section code Documentation of MercuryCG

The list below links to the documentation of the different classes that comprise MercuryCG.
- class CGHandler:\n
Handler that stores all CG objects.
- classes CG, TimeSmoothedCG, TimeAveragedCG:\n
The three available CG classes, used to obtain time-resolved, time smoothed,
and time-averaged continuum fields. Contains a vector of CGPoints.
- templated class CGPoint:\n
Derived from a CGFields and a CGFunctions class. Does the main work of evaluating
the continuum fields at a given position.
- namespace CGFields:\n
Contains the classes StandardFields etc.
- namespace CGFunctions: \n
Contains the templated classes Gauss, Heaviside, Linear, Lucy
(the latter three are derived from Polynomial).
Contains the definition of the cg function used.
Derived from a CGCoordinates class.
- namespace CGCoordinates: \n
Contains the classes O, X, Y, Z, XY, XZ, YZ, XYZ:
Contains the position of the CGPoint.
*/

/*!
\page fstatistics fstatistics: Post-processing discrete particle data using teh coarse-graining formulation (old version)
\tableofcontents

\section sec A postprocessing tool for analysing particle data.

fstatistics is a postprocessing tool: it takes an existing data set, consisting of a restart and one or more data and fstat files, and applies the coarse-graining formulations to it. The output is stored in a stat file, which can then be read by gnuplot or Matlab (via the loadstatistics.m file in Source/Matlab/thomas/) to be visualised.

This document details how to use fstatistics as a post-processing tool for coarse-graining. It can also be used as a live tool, analysis the data while the simulation is still running, you have to use statistics_while_running.cpp. First, we provide the basic functionality, then show some examples, then the more complex operations are introduced.

\section basics Basic functionality

To explain the basic syntax of fstatistics, assume that you have the following three files: filename.restart, filename.data and filename.fstat that you want to analyse. To analyse this data,
- change to the folder Build/Drivers/MercuryCG/,
- compile fstatistics.cpp (\ref DirectoryStructure), then
- run the following command \code./fstatistics filename\endcode

For simplicity, I assumed here that the data files are in the folder Build/Drivers/MercuryCG/. If the data is in another folder, then you have to use the command `./fstatistics $dir/filename`, where $dir is the name of the directory.

By default, fstatistics outputs the time- and space-averaged values of several continuum fields  (density, momentum, stress, and a couple more). This output is shown in the command window, as well as stored in the output file named filename.stat.

This is best illustrated by an example: Compile and run the code NewtonsCradleSelfTest, which is in the same directory as fstatistics, and look at its documentation to familiarise yourself with the simulation. Then run `./fstatistics NewtonsCradleSelfTest`. The output to the screen shows you the time- and space- averaged values for several continuum fields:
\code Averages: VolumeFraction 0.523599, Density 1, Momentum 0 0 -4.96752e-05, ...
 \endcode

You can see that the volume fraction is 0.523599, the density is 1 mass/length^3, while the momentum nearly vanishes, which agrees with the simulation data.

Note that fstatistics returns the momentum instead of the velocity, as momentum has a primary definition as a coarse-grained variable, while velocity is computed by dividing two existing coarse-grained fields (momentum and density). Generally, fstatistics only outputs the primary coarse-grained variables, and the user is expected to compute any secondary fields afterwards. However, the Matlab script loadstatistics.m provides an extended set of primary and secondary variables

\subsection output  Output format

The output file consists of a two-line header followed by several lines of data. For the example above, the output is:

\code
VolumeFraction Density MomentumX MomentumY MomentumZ ...
w 0.5 ...
0 8
0.5 0.5 2.5 0.5235987755982993 0.999999999999999 0 0 -4.967523720252783e-05 ...\endcode

The first line details the different fields that are computed by fstatistics, e.g. volume fraction `Nu`, bulk density `Density` and the three momentum components `MomentumX MomentumY MomentumZ`.

The second line details the coarse-graining parameters, mainly the spatial coarse-graining width `w`.

The third line shows the time step (or time intervall at which the data is taken); in this case, the data is time averaged from t=0 to t=8.

The remaining lines contains the coordinate of a point and the values of the continuum fields at that point (in the order specified in line 1, so colume 1-3 is the point's coordinate, column 4 is volume fraction, column 5 density, column 6-8 momentum). For globally averaged values, there is only one line of data, with the point's coordinate set to the middle of the domain.

\section advanced  Advanced options

 However, fstatistics can do much more than return global averages of the continuum fields. In the following, several commonally used options are discussed.

\subsection temp  Temporally-resolved fields

 The output file can be modified by adding additional arguments to the command line. E.g. you can use the `-timeaverage` command, which takes a boolean (0 or 1) as argument (the default value is 1):
 \code  ./fstatistics NewtonsCradleSelfTest -timeaverage 0 \endcode
 This tells fstatistics to turn off time-averaging. The output file now contains data from several consecutive time steps:

 \code
VolumeFraction Density MomentumX MomentumY MomentumZ ...
w 0.5 ...
0
0.5 0.5 2.5 0.5235987755982988 0.9999999999999978 0 0 0 ...
0.1
0.5 0.5 2.5 0.5235987755982988 0.9999999999999978 0 0 -0.00443464845260919 ...
0.2
0.5 0.5 2.5 0.5235987755982988 0.9999999999999978 0 0 -0.0002324913042918475 ...
...\endcode

\subsection space Spatially-resolved fields
The coarse-graining formulations can return data which is averaged over all
spatial coordinate directions (as shown in the previous examples) or only in certain spactial
directions. Note, the CG formulation returns fields at ALL points in space;
however, we have to evaluate these continuum fields at a final number of 'grid points'.
Use the `-stattype [O,X,Y,Z,XY,XZ,YZ,XYZ]` and `-n [double]` commands to produce spatially resolved fields:
 \code  ./fstatistics NewtonsCradleSelfTest -stattype Z -n 100 -w 0.2\endcode
This produces data that is resolved in the z-coordinate (but averaged in t, x and y). The 'n'-options means a 100 different z-values are evaluated, evenly spread over the domain. The output file now contains 100 lines of data, one for each z-value:

\code
VolumeFraction Density MomentumX MomentumY MomentumZ ...
w 0.5 ...
0 8
0.5 0.5 0.025 0.2722069474489637 0.5198769747655011 0 0 -1.065287345058795e-05 ...
0.5 0.5 0.075 0.2991469265707014 0.5713285448937040 0 0 -1.175249212167385e-05 ...
0.5 0.5 0.125 0.3257896653109658 0.6222124277099292 0 0 -1.285889210570773e-05 ...
...\endcode

By default, the code uses the radius of the first particle in the restart file as the coarse-graining width, and a cut-off Gaussian coarse-graining kernel. Use the commands `-cgtype [Gaussian,Lucy,Heaviside]` and `-w [double]` to change these defaults, e.g.
\code ./fstatistics NewtonsCradleSelfTest -stattype Z -n 1000 -w 0.5 -CGtype Lucy\endcode
This produces z-resolved data using a Lucy kernel with a narrow cutoff radius of 0.5 (one particle radius). For an explanation of what a kernel function is, please see the section of the maths of coarse-graining \ref MercuryCG

We can now visualise this data using e.g. gnuplot:
\code
gnuplot> p 'NewtonsCradleSelfTest.stat' u 3:5 w l
gnuplot> p 'NewtonsCradleSelfTest.stat' u 3:5 w l
gnuplot> p 'NewtonsCradleSelfTest.stat' u 3:5 w l
 \endcode
The result is a density field with peaks at the particle centre and vanishing at a distance of 0.5 from the particle centre:
<img src="CG0.png" width="400">
A second example
\code ./fstatistics NewtonsCradleSelfTest -cgtype XYZ -nx 10 -ny 2 -nz 2 -w \endcode
creates 3D fields (not very sensible for this example) evaluation on a grid which is 10 by 2 by 2. When generating multi-dimensional data -n uses a uniform grid.

\subsection space2 Limiting the spatial and temporal domains:

By default, fstatistics uses evaluates all time steps. However, often time-averaging over a particular time interval is desired, e.g. to look at steady-state data only, or to reduce the computational effort. You can use the `-tmin [double]` and `-tmax [double]` commands to set a time interval on which the coarse graining should be applied:
 \code  ./fstatistics NewtonsCradleSelfTest -tmin 5 -tmax 7\endcode

Similarly, one can change the spatial mesh on which the coarse-graining is evaluated: By default, fstatistics assumes that you want to evaluate the continuum fields on the domain size defined in the restart file. To change this, use the commands `-x [double] [double]`,  `-y [double] [double]` and  `-z [double] [double]`:
 \code
./fstatistics NewtonsCradleSelfTest -cgtype Z -n 100 -w 0.2 -z 1 2
\endcode

\subsection other Other useful commands

`-w_over_rmax [double]`:
Set the averaging width in multiples of the radius of the largest particle in the restart file.

`-nx [integer]`, `-ny [integer]`, `-nz [integer]`:
Specifies the amount of grid points in a specific coordinate direction; use `-n [integer]` to set all 3 directions at once.

`-h [double]`, `-hx [double]`, `-hy [double]`, `-hz [double]`:
Alternatively to setting the amount of grid points with `-n`, one can also specify the mesh size instead. E.g. for a domain of width 3, `-h 0.01` is equivalent to setting `-n 300`. Use `-h` to set the mesh size of all 3 directions at once, `-hx`, `-hy` or `-hz` to specify the mesh size in a specific coordinate direction.

`-indSpecies [integer]`:
Evaluates only data pertaining to a particular Species. Useful for the coarse-graining of mixtures.

`-rmin [double]`, `-rmax [Mdouble]`:
Evaluates only data pertaining to particles above or below the specified radius, respectively.

`-hmax [double]`:
Evaluates only data pertaining to particles below the specified height.

`-walls [uint]`:
only takes into account the first n walls

`-verbosity [0,1,2]`:
amount of screen output (0 minimal, 1 normal, 2 maximal)

`-verbose`:
identical to `-verbosity 2`

`-stepsize [integer]`:
Evaluates only ever n-th time step. Useful to reduce the amount of computational effort.

`-o [string]`:
Changes the name of the output file to string.stat

`-timevariance [bool]`:
Prints the time variance; only for time averaged data.

`-gradient`:
Prints the first derivative of each statistical value


\subpage CGImages

*/

/*! \page CGImages Full-scale Images
 Here, we add the links to a few CG images, otherwise Doxygen doesn't display those using the `\image` command
 \image html CG0.png ds
 \image html CGSegregation.png ds
 \image html CGSilo.png ds
 \image html MercuryCG.png ds
 \image html CGAtoms.png ds
*/
