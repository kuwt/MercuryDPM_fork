//Copyright (c) 2013-2023, The MercuryDPM Developers Team. All rights reserved.
//For the list of developers, see <http://www.MercuryDPM.org/Team>.
//
//Redistribution and use in source and binary forms, with or without
//modification, are permitted provided that the following conditions are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name MercuryDPM nor the
//    names of its contributors may be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE MERCURYDPM DEVELOPERS TEAM BE LIABLE FOR ANY
//DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include "Mercury3D.h"
#include "Species/ThermalSinterLinFrictionReversibleAdhesiveSpecies.h"
#include "Walls/InfiniteWall.h"

/* This code reads the information generated by S1_insertion.
 * A plane is located on the top surface to compress the particles.
*/
// Main class:
class S2_Compression : public Mercury3D{
public:
//
//    //set default values
    S2_Compression()
    {
        setName("S1_InsertionScaledMass");
        readRestartFile();
        setRestarted(false);
        setName("S2_CompressionScaledMass");

        lid = wallHandler.copyAndAddObject(InfiniteWall());
        lid->setSpecies(speciesHandler.getObject(1));
    }
    //--------------------------------------------------
    void setupInitialConditions() override
    {
        // the walls are set based on xMin, xMax, ..., zMax
//        lid = wallHandler.copyAndAddObject(InfiniteWall());
        lid->set(Vec3D(0.0,0.0,1.0), Vec3D(0.0,0.0,getZMax()+0.1*getZMax()));

    }

    ~S2_Compression() override
    {
        delete lid;
    }

    //override continueSolve function such that the code stops
    //when the packing is relaxed (Ekin<1e-2*Eela) and
    //the pressure on the lid is correct (|p/p_lid-1|<1e-1)
    //override continueSolve function such that the code stops
    //when the packing is relaxed (Ekin<1e-5*Eela) and
    //the pressure on the lid is correct (|p/p_lid-1|<1e-3)
    bool continueSolve() const override
    {
        static unsigned int counter = 0;
        if (++counter>100)
        {
            counter=0;

            static Mdouble lidArea = 0.25 * constants::pi * mathsFunc::square(getXMax()- getXMin());
            static Mdouble particleArea = constants::pi * mathsFunc::square(particleHandler.getObject(0)->getRadius());
            static Mdouble stiffness = dynamic_cast<const ThermalSinterLinFrictionReversibleAdhesiveSpecies*>(speciesHandler.getObject(1))->getLoadingStiffness();
            // amount by which the pressure has to be increased
            Mdouble dPressure = lid->getForce().Z/lidArea - pressure;
            // amount by which position should be changed to achieve the right pressure
            Mdouble dV = dPressure * particleArea /stiffness/getTimeStep();
            //std::cout << "dP/P" << dPressure/pressure << " Z" << dZ << std::endl;
            lid->setVelocity(Vec3D(0.0,0.0,dV/50.0));

            if (std::abs(dPressure)<1e-3*pressure && getKineticEnergy()<1e-5*getElasticEnergy())
            {
                printTime();
                return false;
            }
        }
        return true;
    }
    //--------------------------------------------------
    // To define the height of the compression plane.
    Mdouble getSurfaceHeight() const
    {
        Mdouble height = 0.0;


        for (const BaseParticle* p : particleHandler)
        {
            double newHeight = p->getPosition().Z;
            if (height<newHeight) height = newHeight;
        }
        return height+particleHandler.getMeanRadius();
    }

    // To compute the mean coordination number.
    void actionsAfterTimeStep() override
    {
        newHeight = getSurfaceHeight();

        for (int i = particleHandler.getNumberOfObjects()-1; i>=0; i--)
        {
            meanCoordinationNumber += (particleHandler.getObject(i) -> getInteractions()).size();
        }
        meanCoordinationNumber /= particleHandler.getNumberOfObjects();

    }
    //--------------------------------------------------
    // Print at the console.
    void printTime() const override
    {
        Mdouble volSystem = constants::pi*(std::pow(getXMax()/2,2))*newHeight;
        Mdouble volTotalParticles = particleHandler.getVolume();
        Mdouble volParticle = (4.0/3.0)*constants:: pi*(std::pow(particleHandler.getMeanRadius(),3.0));
        Mdouble massTotalParticles = particleHandler.getMass()/factor;
        Mdouble totaldensityPart = massTotalParticles/volTotalParticles;

        Mdouble volParticlesPlusVoidInSystem = constants::pi*(std::pow(getXMax()/2,2.0))*newHeight;
        Mdouble bulkDensity = massTotalParticles/volParticlesPlusVoidInSystem;
        Mdouble TheoDensity = massTotalParticles/volSystem;
        Mdouble MaaSystem = massTotalParticles/volTotalParticles;
        Mdouble volumeFraction = volParticlesPlusVoidInSystem/volSystem;


        static Mdouble lidArea = 0.25 * constants::pi * mathsFunc::square(getXMax()- getXMin());

        std::cout
        << "t=" << std::setprecision(3) << std::left<< std::setw(3)<< getTime()
        << " Ene " << getKineticEnergy()/getElasticEnergy()
        << " Force= " << std::setprecision(3) << std::left<< std::setw(3)<< lid->getForce().Z
        << " PressureStep= " << std::setprecision(3) << std::left<< std::setw(3)<< lid->getForce().Z/lidArea
        << " PressureInit= " << std::setprecision(3) << std::left<< std::setw(3)<< pressure
        << " lidZ " << std::setprecision(3) << std::left<< std::setw(3)<< lid->getPosition().Z
        << " Density=" << std::setprecision(3) << std::left<< std::setw(3)<< totaldensityPart
        << " cyl " << std::setprecision(3) << std::left<< std::setw(3)<< getZMax()
        << " MAxPosi= " << std::setprecision(3) << std::left<< std::setw(3)<< getSurfaceHeight()
//        << " Loading Stiffness= " << std::setprecision(3) << std::left<< std::setw(6)<< dynamic_cast<const ThermalSinterLinFrictionReversibleAdhesiveSpecies*>(speciesHandler.getObject(0))->getLoadingStiffness()
        << std::endl;
    }

private:
    InfiniteWall* lid;
    Mdouble meanCoordinationNumber = 0.0;
    Mdouble newHeight = 0.0;
    Mdouble factor = 1e12;
    Mdouble pressure = 3.0e10; //pressure on the lid [N/m]
};

// Main Function:
int main(int argc UNUSED, char *argv[] UNUSED)
{
    S2_Compression s;
//    s.setTimeMax(100);
    s.removeOldFiles();
    s.setTimeMax(100);
    s.solve();
    return 0;
}