/* CurrentTest - Drop some particles onto a flat base z=0, and wait for the
 * initial collapse to finish. 
 * (Note: The cartesian coordinates are with respect to the lab frame! 
 * Take x to be infinite and y to be periodic.) 
 * Raise the base until there is motion in the downslope direction. This is the
 * static repose angle and can be used to find mu_S. 
 * Then lower the base until there is no motion in the downlope direction. This
 * is the dynamic repose angle and can be used to find mu_D.
 */

#include "Mercury3D.h"
#include "Boundaries/DeletionBoundary.h"
#include "Boundaries/PeriodicBoundary.h"
#include "Particles/BaseParticle.h"
#include "Walls/InfiniteWall.h"
#include "Species/LinearViscoelasticFrictionSpecies.h"
#include "Math/RNG.h"
#include "Math/ExtendedMath.h"
#include "File.h"
#include <iostream>
#include <cassert>
#include <cstdlib>
#include <cstring>

typedef struct {
    double timeStep, timeMax;
    int saveEvery;
    double rho, collisionTime, restitutionCoefficient;
    double particleRadius, dispersity_min, dispersity_max;
    double width;

    double frictionCoefficientSlide;
    double frictionCoefficientRoll;
    double g, thetaMax, thetaDot;
} CT_Parameters;

class CurrentTest : public Mercury3D
{
    public:
        CurrentTest(CT_Parameters pars_in)
        {
            fprintf(stderr, "constructor for CurrentTest\n");
            pars = pars_in;

            setTimeMax(pars.timeMax);
            setTimeStep(pars.timeStep);
            setSaveCount(pars.saveEvery);

            dataFile.setFileType(FileType::NO_FILE);
            fStatFile.setFileType(FileType::NO_FILE);

            /* Define species */
            LinearViscoelasticFrictionSpecies* speciesP;
            speciesP = speciesHandler.copyAndAddObject(LinearViscoelasticFrictionSpecies());
            speciesP->setDensity(pars.rho);
            speciesP->setCollisionTimeAndRestitutionCoefficient(
                    pars.collisionTime,
                    pars.restitutionCoefficient, 
                    (4.0/3.0)*constants::pi*pow(pars.particleRadius, 3)*pars.rho
            );

            speciesP->setSlidingFrictionCoefficient(pars.frictionCoefficientSlide); 
            speciesP->setSlidingStiffness(2.0/7.0 * speciesP->getStiffness());
            speciesP->setSlidingDissipation(2.0/7.0 * speciesP->getDissipation());
            speciesP->setRollingFrictionCoefficient(pars.frictionCoefficientRoll);
            speciesP->setRollingStiffness(2.0/5.0 * speciesP->getStiffness());
            speciesP->setRollingDissipation(2.0/5.0 * speciesP->getDissipation());
            speciesP->setTorsionFrictionCoefficient(pars.frictionCoefficientRoll);
            speciesP->setTorsionStiffness(2.0/5.0 * speciesP->getStiffness());
            speciesP->setTorsionDissipation(2.0/5.0 * speciesP->getDissipation());

            /* Walls */
            setGravity(Vec3D(0,0,-pars.g));
            bottomwall = wallHandler.copyAndAddObject(InfiniteWall());
            bottomwall->setSpecies(speciesP);
            bottomwall->set(Vec3D(0,0,-1), Vec3D(0,0,0));
            backwall = wallHandler.copyAndAddObject(InfiniteWall());
            backwall->setSpecies(speciesP);
            backwall->set(Vec3D(-1,0,0), Vec3D(0,0,0));
            
            /* Periodic boundaries */

            SphericalParticle p0;
            p0.setSpecies(speciesP);
            for (double x = -.5*pars.boundbox; x < .5*pars.boundbox; x += 2*pars.particleRadius*pars.dispersity_max)
                for (double y = -.5*pars.boundbox; y < .5*pars.boundbox; y += 2*pars.particleRadius*pars.dispersity_max)
                    for (double z = pars.particleRadius; z < pars.boundbox+pars.particleRadius; z += 2*pars.particleRadius*pars.dispersity_max)
                    {
                        p0.setRadius(pars.particleRadius * 
                                generator.getRandomNumber(pars.dispersity_min, pars.dispersity_max));
                        p0.setPosition(Vec3D(x,y,z));
                        p0.setVelocity(Vec3D(
                                generator.getRandomNumber(-pars.veleps,pars.veleps), 
                                generator.getRandomNumber(-pars.veleps,pars.veleps), 
                                generator.getRandomNumber(-pars.veleps,pars.veleps)
                                    ));
                        particleHandler.copyAndAddObject(p0);
                    }

            startingEnergy = fabs( getGravitationalEnergy() ) ;
            fprintf(stderr, "startingEnergy = %f\n", startingEnergy);
            finishedCollapse = false;
            finishedCollapseAt = 0;
            startedRolling = false;
            startedRollingAt = 0;

            theta = 0;
        }

        void actionsAfterTimeStep()
        {
            bottomwall->set(Vec3D(-pars.g*sin(theta),0,-pars.g*cos(theta)), Vec3D(0,0,0));
            backwall->set(Vec3D(-pars.g*cos(theta),0,+pars.g*sin(theta)), Vec3D(0,0,0));
        }

    private:
        CT_Parameters pars;
        RNG generator;
        InfiniteWall* bottomwall;
        InfiniteWall* backwall;

        double finishedCollapse;
        double theta;
        double dynamicReposeAngle;
        double staticReposeAngle;

};

int main(const int argc, const char ** argv) 
{


}

