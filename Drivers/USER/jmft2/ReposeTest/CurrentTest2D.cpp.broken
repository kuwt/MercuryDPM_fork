/* CurrentTest2D - Drop some particles onto a flat base y=0, and wait for the
 * initial collapse to finish. 
 * (Note: The cartesian coordinates are with respect to the lab frame! 
 * Take x to be infinite and periodic.) 
 * Raise the base until there is motion in the downslope direction. This is the
 * static repose angle and can be used to find mu_S. 
 * Then lower the base until there is no motion in the downlope direction. This
 * is the dynamic repose angle and can be used to find mu_D.
 */

#include "Mercury2D.h"
#include "Boundaries/PeriodicBoundary.h"
#include "Particles/BaseParticle.h"
#include "Walls/InfiniteWall.h"
#include "Species/LinearViscoelasticFrictionSpecies.h"
#include "Math/RNG.h"
#include "Math/ExtendedMath.h"
#include "File.h"
#include <iostream>
#include <cassert>
#include <cstdlib>
#include <cstring>

#define MAX_STRLEN 1024

typedef struct {
    double timeStep, timeMax;
    int saveEvery;
    double rho, g;
    double particleRadius, dispersity;
    double length, height;

    double collisionTime, restitutionCoefficient, betaslide, betaroll;
    double thetaMax, thetaDot;
} CT2D_pars_t;

class CurrentTest2D : public Mercury2D
{
    public:
        CurrentTest2D(CT2D_pars_t pars_in)
        {
            fprintf(stderr, "constructor for CurrentTest2D\n");
            pars = pars_in;

            setTimeMax(pars.timeMax);
            setTimeStep(pars.timeStep);
            setSaveCount(pars.saveEvery);

            dataFile.setFileType(FileType::MULTIPLE_FILES);
            fStatFile.setFileType(FileType::NO_FILE);

            /* Define species */
            speciesP = speciesHandler.copyAndAddObject(LinearViscoelasticFrictionSpecies());
            speciesP->setDensity(pars.rho);
            speciesP->setCollisionTimeAndRestitutionCoefficient(
                    pars.collisionTime,
                    pars.restitutionCoefficient, 
                    constants::pi*pow(pars.particleRadius, 2)*pars.rho
            );

            speciesP->setSlidingFrictionCoefficient(pars.betaslide); 
            speciesP->setSlidingStiffness(2.0/7.0 * speciesP->getStiffness());
            speciesP->setSlidingDissipation(2.0/7.0 * speciesP->getDissipation());
            speciesP->setRollingFrictionCoefficient(pars.betaroll);
            speciesP->setRollingStiffness(2.0/5.0 * speciesP->getStiffness());
            speciesP->setRollingDissipation(2.0/5.0 * speciesP->getDissipation());
            speciesP->setTorsionFrictionCoefficient(0);
            speciesP->setTorsionStiffness(2.0/5.0 * speciesP->getStiffness());
            speciesP->setTorsionDissipation(2.0/5.0 * speciesP->getDissipation());

            setGravity(Vec3D(0,-pars.g,0));

            /* Walls */
            bottomwall = wallHandler.copyAndAddObject(InfiniteWall());
            bottomwall->setSpecies(speciesP);
            bottomwall->set(Vec3D(0,-1,0), Vec3D(0,0,0));
            
            /* Periodic boundaries */
            PeriodicBoundary bounds;
            bounds.set(Vec3D(1,0,0), -pars.length/2, +pars.length/2);
            boundaryHandler.copyAndAddObject(bounds);

            SphericalParticle p0;
            p0.setSpecies(speciesP);
            double jump = 2*pars.particleRadius*(1 + pars.dispersity);
            for (double x = -pars.length/2; x < pars.length/2; x += jump)
                    for (double y = pars.particleRadius; y < pars.height; y += jump)
                    {
                        p0.setRadius(pars.particleRadius * 
                                generator.getRandomNumber(1-pars.dispersity, 1+pars.dispersity));
                        p0.setPosition(Vec3D(x,y,0));
                        p0.setVelocity(Vec3D(0,0,0));
                        particleHandler.copyAndAddObject(p0);
                    }

            /*
            startingEnergy = fabs( getGravitationalEnergy() ) ;
            fprintf(stderr, "startingEnergy = %f\n", startingEnergy);
            finishedCollapse = false;
            finishedCollapseAt = 0;
            startedRolling = false;
            startedRollingAt = 0;
            */

            theta = 0;
        }

        void actionsAfterTimeStep()
        {
            if (getTime() < pars.thetaMax / pars.thetaDot)
                theta = pars.thetaDot * getTime();
            else if (getTime() < 2 * pars.thetaMax / pars.thetaDot)
                theta = 2*pars.thetaMax - pars.thetaDot * getTime();
            else 
                theta = 0;

            setGravity(Vec3D(pars.g*sin(theta),-pars.g*cos(theta),0));

            // bottomwall->set(Vec3D(-pars.g*sin(theta),-pars.g*cos(theta),0), Vec3D(0,0,0));
            // backwall->set(Vec3D(-pars.g*cos(theta),+pars.g*sin(theta),0), Vec3D(0,0,0));
            
            /*
            fprintf(stdout, "t=%f theta=%f\n",
                    getTime(), theta * 180 / M_PI);
                    */
        }

    private:
        CT2D_pars_t pars;
        RNG generator;
        InfiniteWall* bottomwall;
        LinearViscoelasticFrictionSpecies* speciesP;

        double finishedCollapse;
        double theta;
        double dynamicReposeAngle;
        double staticReposeAngle;
};

typedef enum {
    BALLOTINI, SAND, GRIT, FRICTIONLESS
} material;

void CT2D_pars_preset(CT2D_pars_t* pars, char* label, material mat);

int main(const int argc, const char ** argv) 
{
    char label[MAX_STRLEN];
    CT2D_pars_t pars;
    if (argc != 2) 
    {
        fprintf(stderr, "Usage: %s [ballotini|sand|grit|frictionless]\n", argv[0]);
        exit(-1);
    }
    else
    {
        if (strcmp(argv[1], "ballotini") == 0)
            CT2D_pars_preset(&pars, label, BALLOTINI);
        if (strcmp(argv[1], "sand") == 0)
            CT2D_pars_preset(&pars, label, SAND);
        if (strcmp(argv[1], "grit") == 0)
            CT2D_pars_preset(&pars, label, GRIT);
        if (strcmp(argv[1], "frictionless") == 0)
            CT2D_pars_preset(&pars, label, FRICTIONLESS);
    }


    CurrentTest2D problem(pars);
    char problemname[MAX_STRLEN];
    if (strlen(label) > 0)
        strncpy(problemname, label, MAX_STRLEN);
    else
        strncpy(problemname, "CurrentTest2D", MAX_STRLEN);
    problem.setName(problemname);

    problem.solve();

    return 0;
}

void CT2D_pars_preset(CT2D_pars_t *pars, char* label, material mat)
{
    pars->timeStep = 8e-5;
    pars->timeMax = 3000;
    pars->saveEvery = 2000;

    pars->rho = 1;
    pars->g = 1;

    pars->particleRadius = 0.005;
    pars->length = 1;
    pars->height = 0.25;
    pars->thetaMax = 45.0 * M_PI / 180.;
    pars->thetaDot = 0.1 * 1.0 * M_PI / 180.;

    pars->collisionTime = 4e-3;

    switch(mat)
    {
        case BALLOTINI:
            pars->dispersity = 0.1;
            pars->restitutionCoefficient = 0.66;
            pars->betaslide = tan(21.8 * M_PI / 180.);
            pars->betaroll = tan(0.0 * M_PI / 180.);
            strncpy(label, "ballotini", MAX_STRLEN);
            break;

        case SAND:
            pars->dispersity = 0.25;
            pars->restitutionCoefficient = 0.66;
            pars->betaslide = tan(34.0 * M_PI / 180.);
            pars->betaroll = tan(5.0 * M_PI / 180.);
            strncpy(label, "sand", MAX_STRLEN);
            break;

        case GRIT:
            pars->dispersity = 0.2;
            pars->restitutionCoefficient = 0.66;
            pars->betaslide = tan(34.0 * M_PI / 180.);
            pars->betaroll = tan(25.0 * M_PI / 180.);
            strncpy(label, "grit", MAX_STRLEN);
            break;

        case FRICTIONLESS:
            pars->dispersity = 0.1;
            pars->restitutionCoefficient = 0.66;
            pars->betaslide = tan(0.0 * M_PI / 180.);
            pars->betaroll = tan(0.0 * M_PI / 180.);
            strncpy(label, "frictionless", MAX_STRLEN);
            break;

        default:
            break;
    }
}
