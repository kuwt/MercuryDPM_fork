/* muICal2D-assays - Runs several instances of muICal2D in parallel. 
 * You specify a range of sliding and rolling frictions to go between. */

#include "muICal2D.h"
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<sys/types.h>
#include<unistd.h>

int main(int argc, char ** argv)
{
    char speciesname[MAX_STRLEN];
    double rest;
    double sfmin, sfjump, sfmax;
    double rfmin, rfjump, rfmax;
    double thetamin, thetajump, thetamax;

    printf("please enter a species name: ");
    fgets(speciesname, MAX_STRLEN, stdin);
    // Check that the speciesname is not too long, and trim the newline.
    // answer from http://stackoverflow.com/questions/2693776/
    char *pos;
    if ((pos=strchr(speciesname, '\n')) != NULL)
            *pos = '\0';
    else
    {
        fprintf(stderr, "Too long!\n");
        exit(-1);
    }

    printf("please enter rest... ");
    scanf("%lf", &rest);
    printf("please enter sfmin:sfjump:sfmax in degrees... ");
    scanf("%lf:%lf:%lf", &sfmin, &sfjump, &sfmax);
    printf("please enter rfmin:rfjump:rfmax in degrees... ");
    scanf("%lf:%lf:%lf", &rfmin, &rfjump, &rfmax);
    printf("please enter thetamin:thetajump:thetamx in degrees... ");
    scanf("%lf:%lf:%lf", &thetamin, &thetajump, &thetamax);
    
    pid_t child_pid;
    printf("%d: Parent reporting in\n", (int)getpid());

    muICal2D_pars_t pars;
    pars.timeStep = 2e-4;
    pars.timeMax = 6000;
    pars.saveEvery = 500;
    pars.rho = 1.0;
    pars.g = 1.0;
    pars.particleRadius = 0.01;
    pars.dispersity = 0.25;
    pars.length = 2.0;
    pars.height = 0.5;
    pars.collisionTime = 4e-3;
    pars.restitutionCoefficient = rest;

    double sf, rf, theta;
    for (sf = sfmin; sf <= sfmax; sf += sfjump)
    {
        for (rf = rfmin; rf <= rfmax; rf += rfjump)
        {
            for (theta = thetamin; theta<= thetamax; theta += thetajump)
            {
                child_pid = fork();
                if (child_pid != 0)
                    printf("%d: Created a child %d, sf = %f, rf = %f, theta = %f\n",
                            (int)getpid(), (int)child_pid, sf, rf, theta);
                else
                {
                    nice(19);
                    printf("%d: Running with sf = %f, rf = %f\n",
                            (int)getpid(), sf, rf);
                    pars.betaslide = sf * M_PI / 180.;
                    pars.betaroll = rf * M_PI / 180.;
                    pars.thetaMin = theta * M_PI/180.;
                    pars.thetaMax = theta * M_PI/180.;
                    pars.thetaDot = 0;
                    char probname[MAX_STRLEN];
                    snprintf(probname, 1024, "%s-%.3f-%.1f-%.1f-%.1f",
                            speciesname, rest, sf, rf, theta);
                    muICal2D problem(pars);
                    problem.setName(probname);
                    printf("%d: About to run %s\n", (int)getpid(), probname);
                    problem.solve();
                    printf("%d: All done.\n", (int)getpid());
                    break;
                }
            }
        }
    }
}
